================================================================================
INSTRUCTIONS:

in Windows, use git bash, to use linux commands.
================================================================================


==================== GIT MAIN SUMMARY COMMANDS (like Perforce) ==================================

1.  git init                               # mark the beginning of tracking the project
    git config --global user.email "dishant.in@gmail.com"                                  # assigns the git to your account # git uses it for gitHub sync, I think
2.  git remote add origin https://github.com/dishant-inuyashaYagami/myFirstGitHubRepo.git  # links the local git to gitHub; name "origin" is an alias to the URL.
3.  git pull origin master                 # pulls all the changes in the origin to the master branch (if you set htpps error: see this link: https://stackoverflow.com/ques
                                             tions/53988638/git-fatal-protocol-https-is-not-supported)
4.  git add <file_name>                    # equivalent of p4 edit <file_name>
5.  git commit -m <commit_message>         # equivalent of p4 change; p4 commit -c <changelist_number> or git commit -m <commit_message> <file_name> also works!
6.  git push -u origin master              # push all the changes in the master branch to gitHub 




==================== GIT COMMANDS ===========================================================================================================

Reference: youtube link: Learn Git In 15 Minutes (https://www.youtube.com/watch?v=USjZcfj8yxE&ab_channel=ColtSteele)

level 1 commands: (must know at all times)
git init                               # mark the beginning of tracking the project
git add <file_name>                    # equivalent of p4 edit <file_name>
git commit -m <commit_message>         # equivalent of p4 change; p4 commit -c <changelist_number>  


level 2 commands:
git status                    # gives the staus of the stagged and unstagged files
git log                       # gives the list of all commits 
git branch                    # gives the list of branches
git checkout <branch_name>    # takes you to the specified branch or changelist


pre-setup commands:
git config --global user.email "dishant.in@gmail.com"          # assigns the git to your account # git uses it for gitHub sync, I think

=============================================================================================================================================


==================== GITHUB COMMANDS =========================================================================================

Reference: youtube link: "Learn Github in 20 Minutes" (https://www.youtube.com/watch?v=nhNq2kIvi9s&ab_channel=ColtSteele)

level 1 commands: (must be known at all times)
git push -u origin master             # push all the changes in the master branch to gitHub


level 2 commnds:
git pull origin master                # pulls all the changes in the origin to the master branch
git remote -v                         # prints the gutHub link the git is connected to

setup commands:
git remote add origin https://github.com/dishant-inuyashaYagami/myFirstGitHubRepo.git       # links the local git to gitHub; name "origin" is an alias to the URL.

==============================================================================================================================




==================== Perforce Commands =======================================================================================

Reference: [Kaushik, Divij, Raghav, Jitin]

most basic commands:
create client:   <see_your_organizations_command>
syncing client:  p4 sync <build_id/changeList>
edit file:       p4 edit <file_name>
add description: p4 change
commit:          p4 submit -c <changeListId>

all set of commands:
 ---- Level 1 (Creating): (summary: 111)
	p4 edit <file_name>.
	p4 change: create a change list.
	p4 submit -c <change_list_number>: submit a change list.

	p4 add <file_name>:    add the new file to change list.
	p4 add <dir_name>/…: add the directory and all its coontents recursively to the change list.
	To add the symbolic link files, use display and use reconcile work option on the folder [DIVIJ].


 ---- Level 2 (Editing): (summary: 232)
	p4 opened:  see the list of open files.
	p4 diff <file_name>: see the diff of changes.
	p4 annotate -c <file_name>: see the diff of changes. (use >> to save the results in a file if too big.)


	p4 describe <change_list_number>: see files opened in  change list.
	p4 change -u  <change_list_number>: update description of a change list.
	p4 reopen -c <change_number> <file_name>: Move a file from one change list to other.
	p4 changes -c your-client-name -s pending: view list of pending changes. (what is its use).
	p4 filelog <file_name>: view the creation CL for the file.



	p4 shelve -c <change_number>: Shelve change list (Use it to share code with someone without doing
	                                                                                 commit to main branch)
	p4 unshelve -s <change_number>. Unshelve change list (client must be the same).



 ---- Level 3 (Reverting and Deleting): (summary: 311)
	p4 revert <file_name>: revert changes to a file.
	p4 revert //… : revert all changes.
	Revert the change list that is shelved: go to p4v & and the go to appropriate workspace, and then
                                                            right click on the appropriate <change-number> and delete it.

	p4 change -d <change-number>: remove a pending change list.

	p4 shelve -c 854762 -d: delete a shelved change list.
	p4 unlock: unlocks all the files in the client.



If run into problem of deleting clients, refer this: https://stackoverflow.com/questions/12296080/how-to-delete-a-perforce-client-with-pending-changelist


Undoing changelist using gui: [Kaushik]
	○ set up display using setenv DISPLAY sjcvl-dishantg:2 and do p4v &.
	○ Select the workspace where you want to undo changes.
	○ Go to view option, select the submitted changelists.
	○ Go to the required changelist, right click and undo it.
	○ Select sequences of "yes".. .
	○ Go again to view options and select pending changelists. You will see that changelist opened and reverted in your local client.


Check-in/submitting changes: p4 submit -c <change_list_number>. Do p4 resolve before submitting. 
If unable to resolve, it means you have resolved it earlier. Re-resolve using p4 resolve -f.


Integrating changes to different branch: p4 integ //hsv/ap_main/...@<CL#>,<CL#> //hsv/branch23h1/…
Run this command in 23h1 to integrate the changes from main. Then p4 resolve to do actual change.


==============================================================================================================================





